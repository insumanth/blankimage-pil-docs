"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[575],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>g});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),m=c(n),f=i,g=m["".concat(s,".").concat(f)]||m[f]||u[f]||a;return n?r.createElement(g,o(o({ref:t},p),{},{components:n})):r.createElement(g,o({ref:t},p))}));function g(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,o=new Array(a);o[0]=f;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[m]="string"==typeof e?e:i,o[1]=l;for(var c=2;c<a;c++)o[c]=n[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},8361:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>u,frontMatter:()=>a,metadata:()=>l,toc:()=>c});var r=n(7462),i=(n(7294),n(3905));const a={title:"CLI",description:"using cli."},o="CLI",l={unversionedId:"tutorial-basics/cli",id:"tutorial-basics/cli",title:"CLI",description:"using cli.",source:"@site/docs/tutorial-basics/cli.md",sourceDirName:"tutorial-basics",slug:"/tutorial-basics/cli",permalink:"/blankimage-pil-docs/tutorial-basics/cli",draft:!1,editUrl:"https://github.com/insumanth/blankimage-pil-docs/docs/tutorial-basics/cli.md",tags:[],version:"current",frontMatter:{title:"CLI",description:"using cli."},sidebar:"tutorialSidebar",previous:{title:"Usage",permalink:"/blankimage-pil-docs/category/usage"},next:{title:"Color",permalink:"/blankimage-pil-docs/tutorial-basics/color"}},s={},c=[{value:"blankimage-pil is a python cli to generate blank images. It has simple cli interface to get the job done.",id:"blankimage-pil-is-a-python-cli-to-generate-blank-images-it-has-simple-cli-interface-to-get-the-job-done",level:4}],p={toc:c},m="wrapper";function u(e){let{components:t,...n}=e;return(0,i.kt)(m,(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"cli"},"CLI"),(0,i.kt)("h4",{id:"blankimage-pil-is-a-python-cli-to-generate-blank-images-it-has-simple-cli-interface-to-get-the-job-done"},"blankimage-pil is a python cli to generate blank images. It has simple cli interface to get the job done."),(0,i.kt)("p",null,"Use ",(0,i.kt)("inlineCode",{parentName:"p"},"blankimage-pil")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"blankimage")," to invoke the cli tool."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"\n $ blankimage --help\nusage: blankimage [-h] \n[--size HEIGHT WIDTH] \n[--color-mode {RGB,RGBA,HSV,CMYK,YCbCr,LAB,P,RGBX,1,F,I,L,HEX}] \n[--color COLOR] \n[--image-format {BLP,BMP,DDS,DIB,EPS,GIF,ICNS,ICO,IM,JPEG,JPEG_2000,MSP,PCX,PNG,PPM,SGI,SPIDER,TGA,TIFF,WebP,XBM,PALM,PDF,XV}] \n[--params PARAMS] [filename]\n\npositional arguments:\n  filename              File name of the generated file. File extension is used to infer the image file type.\n\noptions:\n  -h, --help            show this help message and exit\n  --size HEIGHT WIDTH   Image dimensions\n  --color-mode {RGB,RGBA,HSV,CMYK,YCbCr,LAB,P,RGBX,1,F,I,L,HEX}\n                        Color format to use in image and given in --color.\n  --color COLOR         Color value to use in image, Hex string or comma seperated list of numbers as per --color-mode format.\n  --image-format {BLP,BMP,DDS,DIB,EPS,GIF,ICNS,ICO,IM,JPEG,JPEG_2000,MSP,PCX,PNG,PPM,SGI,SPIDER,TGA,TIFF,WebP,XBM,PALM,PDF,XV}\n                        Image file format. Overrides the inferred file type from file name.\n  --params PARAMS       Additional params in JSON format that will be passed when saving image.\n\n")))}u.isMDXComponent=!0}}]);